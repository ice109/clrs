#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 2
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Radix Sort
\end_layout

\begin_layout Standard
Counting sort runs in 
\begin_inset Formula $\Theta\left(n+k\right)$
\end_inset

 where 
\begin_inset Formula $n$
\end_inset

 is the number of elements to sort and 
\begin_inset Formula $k=\max_{x\in n}\left(x\right)$
\end_inset

.
 Therefore if you make 
\begin_inset Formula $d$
\end_inset

 passes total running time is 
\begin_inset Formula $\Theta\left(d\left(n+k\right)\right)$
\end_inset

.
 Suppose given 
\begin_inset Formula $n$
\end_inset

 each
\series bold
 
\begin_inset Formula $b$
\end_inset

 
\series default
bits divided into 
\begin_inset Formula $r$
\end_inset

 bit groups.
 Each of the 
\begin_inset Formula $d=\lceil b/r\rceil$
\end_inset

 groups and so radix sort runs in 
\begin_inset Formula 
\[
\Theta\left(\frac{b}{r}\left(n+2^{r}\right)\right)
\]

\end_inset

since for 
\begin_inset Formula $r$
\end_inset

 bits the max number is 
\begin_inset Formula $2^{r}$
\end_inset

.
\end_layout

\begin_layout Standard
For given values of 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 what's the best grouping? What's the best 
\begin_inset Formula $r\leq b$
\end_inset

 that minimizes 
\begin_inset Formula $\left(b/r\right)\left(n+2^{r}\right)$
\end_inset

? If 
\begin_inset Formula $b<\lfloor\lg n\rfloor$
\end_inset

 then for any values of 
\begin_inset Formula $r\leq b$
\end_inset

 we have that 
\begin_inset Formula 
\begin{eqnarray*}
\Theta\left(n+2^{r}\right) & \leq & \Theta\left(n+2^{\lg n}\right)\\
 & = & \Theta\left(n+n\right)\\
 & = & \Theta\left(n\right)
\end{eqnarray*}

\end_inset

Hence choosing 
\begin_inset Formula $r=b$
\end_inset

 we get 
\begin_inset Formula 
\[
\Theta\left(\frac{b}{r}\left(n+2^{r}\right)\right)=\Theta\left(n\right)
\]

\end_inset

If 
\begin_inset Formula $b\geq\lfloor\lg n\rfloor$
\end_inset

 choosing 
\begin_inset Formula $r=\lfloor\lg n\rfloor$
\end_inset

 gives the best running time within a constant factor.
 Why? With 
\begin_inset Formula $r=\lfloor\lg n\rfloor$
\end_inset

 we have 
\begin_inset Formula 
\[
\Theta\left(\frac{b}{r}\left(n+2^{r}\right)\right)=\Theta\left(\frac{bn}{\lg n}\right)
\]

\end_inset

If 
\begin_inset Formula $r>\lfloor\lg n\rfloor$
\end_inset

 then the 
\begin_inset Formula $2^{r}$
\end_inset

 term in the numerator dominates the 
\begin_inset Formula $r$
\end_inset

 in the denominator and so is greater, i.e.
 the running time is bounded below: 
\begin_inset Formula 
\[
\Omega\left(\frac{bn}{\lg n}\right)
\]

\end_inset

If instead 
\begin_inset Formula $r<\lfloor\lg n\rfloor$
\end_inset

 then 
\begin_inset Formula $b/r$
\end_inset

 increases and 
\begin_inset Formula $n+2^{r}$
\end_inset

 stays 
\begin_inset Formula $\Theta\left(n\right)$
\end_inset

.
 
\end_layout

\begin_layout Exercise
\begin_inset ERT
status open

\begin_layout Plain Layout

[8.3-4]
\end_layout

\end_inset

 In base 
\begin_inset Formula $n$
\end_inset

 the number 
\begin_inset Formula $n^{3}-1$
\end_inset

 are two digits numbers e.g.
 
\begin_inset Formula $1000_{n}=1\times n^{3}+0n^{2}+0n+0\times1$
\end_inset

.
 So we make 4 passes using radix sort
\begin_inset Formula 
\[
\Theta\left(4\left(n+n\right)\right)=O\left(n\right)
\]

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Exercise
\begin_inset ERT
status open

\begin_layout Plain Layout

[8-5]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[a.]
\end_layout

\end_inset

 To be sorted duh
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[b.]
\end_layout

\end_inset

 
\begin_inset Formula $2,1,4,3,6,5,8,7,10,9$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[c.]
\end_layout

\end_inset

 Think about it: in 
\begin_inset Formula 
\[
\sum_{j=i}^{i+k-1}A\left[i\right],\sum_{j=i+1}^{i+k}A\left[i\right]
\]

\end_inset

all the 
\begin_inset Quotes eld
\end_inset

middle
\begin_inset Quotes erd
\end_inset

 elements are in common, i.e.
 
\begin_inset Formula 
\begin{eqnarray*}
\sum_{j=i}^{i+k-1}A\left[i\right] & = & A\left[i\right]+\sum_{j=i+1}^{i+k-1}A\left[i\right]\\
\sum_{j=i+1}^{i+k}A\left[i\right] & = & \sum_{j=i+1}^{i+k-1}A\left[i\right]+A\left[i+k\right]
\end{eqnarray*}

\end_inset

Hence
\begin_inset Formula 
\[
\sum_{j=i+1}^{i+k}A\left[i\right]-\sum_{j=i}^{i+k-1}A\left[i\right]=A\left[i+k\right]-A\left[i\right]\geq0
\]

\end_inset

iff 
\begin_inset Formula $A\left[i\right]\leq A\left[i+k\right]$
\end_inset

 for 
\begin_inset Formula $i=1,\dots,n-k$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[d.]
\end_layout

\end_inset

 Effect the above: sort 
\begin_inset Formula $A\left[1\right],A\left[1+k\right],\dots$
\end_inset

 and 
\begin_inset Formula $A\left[2\right],A\left[2+k\right],\dots$
\end_inset

 and etc.
 How many entries for each of these sorts? 
\begin_inset Formula $n/k$
\end_inset

.
 So each sort costs 
\begin_inset Formula $O\left(\left(n/k\right)\log\left(n/k\right)\right)$
\end_inset

.
 How many sorts? 
\begin_inset Formula $k$
\end_inset

.
 So total cost is 
\begin_inset Formula $O\left(\left(k\times n/k\right)\left(\log\left(n/k\right)\right)\right)=O\left(n\log\left(n/k\right)\right)$
\end_inset

.
\end_layout

\end_body
\end_document
