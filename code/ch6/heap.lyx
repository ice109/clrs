#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 2
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Heap
\end_layout

\begin_layout Itemize
Parent: 
\begin_inset Formula $\lfloor i/2\rfloor$
\end_inset

, 
\begin_inset Formula $\lfloor\left(i-1\right)/2\rfloor$
\end_inset

 if array is 0 indexed, Left child: 
\begin_inset Formula $2\times i$
\end_inset

, 
\begin_inset Formula $2\times i+1$
\end_inset

 if array is 0 indexed, Right child: 
\begin_inset Formula $2\times i+1$
\end_inset

, 
\begin_inset Formula $2\times i+1+1$
\end_inset

 if array is 0 indexed.
\end_layout

\begin_layout Itemize
Percolate down/Heapify: check in which direction element violates heap property
 
\series bold
worst 
\series default
and swap, i.e.
 out of parent, left child, right child, swap Heapiest element with least
 heapy element, where heapiest is defined as largest for MaxHeap and smallest
 for MinHeap.
\end_layout

\begin_layout Itemize
Build Heap from array: just use array as is but start Heapify at 
\begin_inset Formula $\lfloor n/2\rfloor$
\end_inset

.
 Why does this work? Because each of the leaf nodes already satisfy the
 Heap property and so we just give the rest.
 How much does this cost over the naive 
\begin_inset Formula $O\left(n\lg n\right)$
\end_inset

 inserting into an empty Heap? Well at each level of the Heap there are
 
\begin_inset Formula $\sim n/2^{h}$
\end_inset

 elements and each heapify operations costs 
\begin_inset Formula $O\left(h\right)$
\end_inset

(because the element might percolate to the root each time).
 So 
\begin_inset Formula 
\[
\sum_{h=\lfloor\lg\left(n\right)\rfloor}^{h=0}\frac{n}{2^{h}}\times O\left(h\right)=\sum_{h=0}^{\lfloor\lg\left(n\right)\rfloor}\frac{n}{2^{h}}\times O\left(h\right)
\]

\end_inset

where the sum starts at 
\begin_inset Formula $\lfloor\lg\left(n\right)\rfloor$
\end_inset

 because that's the level just above the leaf nodes.
 Then 
\begin_inset Formula 
\begin{eqnarray*}
\sum_{h=0}^{\lfloor\lg\left(n\right)\rfloor}\frac{n}{2^{h}}\times O\left(h\right) & = & O\left(n\sum_{h=0}^{\lfloor\lg\left(n\right)\rfloor}\frac{h}{2^{h}}\right)\\
 & \leq & O\left(n\sum_{h=0}^{\infty}\frac{h}{2^{h}}\right)\\
 & = & O\left(n\times2\right)
\end{eqnarray*}

\end_inset

where the sum is computed by taking the derivative of the sum
\begin_inset Formula 
\[
\sum_{h=0}^{\infty}\frac{1}{2^{h}}=\frac{1}{1-\frac{1}{2}}
\]

\end_inset


\end_layout

\begin_layout Itemize
Push: append to the end of the array backing the Heap and then percolate
 up.
\end_layout

\begin_layout Itemize
Delete: replace by last node, delete the last node, then re-heapify (percolate
 down since it couldn't possibly be smaller than anything).
 Why last node? Deleting the node preserves the heap property in the subtrees
 but disjoins them, so they need to be merged, without inserting a spurious
 entry.
\end_layout

\begin_layout Itemize
Extract Max(Min): save the first node then `delete` it.
\end_layout

\begin_layout Exercise*
Give an 
\begin_inset Formula $O\left(n\lg k\right)$
\end_inset

 algorithm for constructing a sorted array from 
\begin_inset Formula $k$
\end_inset

 already sorted arrays (where the total number of elements is 
\begin_inset Formula $n$
\end_inset

).
\end_layout

\begin_layout Exercise*
Use a MinHeap with the extract min property: construct a MinHeap from first
 elements in each array.
 Pop the the minimum element and add to a surrogate array.
 Replace with the next element of the array that that one came from.
 This way the smallast element of each of the 
\begin_inset Formula $k$
\end_inset

 arrays is always in direct competition.
 Constructing the initial array is 
\begin_inset Formula $O\left(k\right)$
\end_inset

 and then each of the Extract-min operations costs 
\begin_inset Formula $\lg k$
\end_inset

, hence 
\begin_inset Formula $O\left(n\lg k\right)$
\end_inset

.
\end_layout

\begin_layout Itemize
Percolate up: switch the elements with their parents if the heap property
 is violated or you reach the root.
\end_layout

\end_body
\end_document
