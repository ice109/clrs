#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\shape up
Proofs of shortest-paths properties
\end_layout

\begin_layout Lemma

\series bold
\shape up
\begin_inset CommandInset label
LatexCommand label
name "lem:Subpaths-of-shortest"

\end_inset

Subpaths of shortest paths are shortest paths.
\end_layout

\begin_layout Theorem

\series bold
\shape up
Triangle inequality
\series default
.
 Let 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 be a weighted, directed graph with weight function 
\begin_inset Formula $w\,:\, E\rightarrow\mathbb{R}$
\end_inset

 and source vertex 
\begin_inset Formula $s$
\end_inset

.
 Then for all edges 
\begin_inset Formula $\left(u,v\right)\in E$
\end_inset

, we have 
\begin_inset Formula $\delta\left(s,v\right)\leq\delta\left(s,u\right)+w\left(\left(u,v\right)\right)$
\end_inset


\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $p=\left\langle s,\dots,v\right\rangle $
\end_inset

 be the shortest path from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

.
 Then 
\begin_inset Formula $p$
\end_inset

 has length 
\begin_inset Formula $\delta\left(s,v\right)$
\end_inset

 and since 
\begin_inset Formula $p$
\end_inset

 is the shortes path 
\begin_inset Formula $\delta\left(s,v\right)$
\end_inset

 is less than or equal to the length of any other path from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

.
 In particular the path that includes the shortest path from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $u$
\end_inset

 plus the edge from 
\begin_inset Formula $u$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

.
 If there is no path from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

 then define 
\begin_inset Formula $\delta\left(s,v\right)\equiv-\infty$
\end_inset

.
\end_layout

\begin_layout Lemma

\series bold
\shape up
Upper-bound property
\series default
.
 Let 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 be a weighted, directed graph with weight function 
\begin_inset Formula $w\,:\, E\rightarrow\mathbb{R}$
\end_inset

 and source vertex 
\begin_inset Formula $s$
\end_inset

 and initialize the graph with 
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Python,mathescape=true,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

Initialize-Single-Source$
\backslash
left(G,s
\backslash
right)$
\end_layout

\begin_layout Plain Layout

for each $v
\backslash
in V$
\end_layout

\begin_layout Plain Layout

	$v.d = 
\backslash
infty$
\end_layout

\begin_layout Plain Layout

	$v.
\backslash
pi = $NIL
\end_layout

\begin_layout Plain Layout

$s.d = 0$
\end_layout

\begin_layout Plain Layout

	
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Initialize-Single-Source
\end_layout

\end_inset


\end_layout

\end_inset

then 
\begin_inset Formula $v.d\geq\delta\left(s,v\right)$
\end_inset

 for all 
\begin_inset Formula $v\in V$
\end_inset

 and this invariant is maintained over any sequence of relaxation steps
 on the edges of 
\begin_inset Formula $G$
\end_inset

.
 Moreover, once 
\begin_inset Formula $v.d$
\end_inset

 achieves its lower bound 
\begin_inset Formula $\delta\left(s,v\right)$
\end_inset

, it never changes.
\end_layout

\begin_layout Proof
Proof by induction on the number of relaxation steps: 
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Python,mathescape=true,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

Relax$
\backslash
left(u,v,w
\backslash
right)$
\end_layout

\begin_layout Plain Layout

if $v.d > u.d + w
\backslash
left(
\backslash
left(u,v
\backslash
right)
\backslash
right)$
\end_layout

\begin_layout Plain Layout

	$v.d = u.d + w
\backslash
left(
\backslash
left(u,v
\backslash
right)
\backslash
right)$
\end_layout

\begin_layout Plain Layout

	$v.
\backslash
pi = u$
\end_layout

\begin_layout Plain Layout

	
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Relaxation
\end_layout

\end_inset


\end_layout

\end_inset

For the base case 
\begin_inset Formula $v.d\geq\delta\left(s,v\right)$
\end_inset

 for all 
\begin_inset Formula $v\in V$
\end_inset

 after the initialization step since 
\begin_inset Formula $v.d=\infty$
\end_inset

 for all 
\begin_inset Formula $v\in V$
\end_inset

 after the initialization step.
 The inductive hypothesis is 
\begin_inset Formula $x.d\geq\delta\left(s,x\right)$
\end_inset

 for 
\begin_inset Formula $x\in V$
\end_inset

 after the previous relaxation step.
 During the relaxation of 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 only 
\begin_inset Formula $v.d$
\end_inset

 might change, and if it does then it's set to 
\begin_inset Formula $u.d+w\left(\left(u,v\right)\right)$
\end_inset

.
 But 
\begin_inset Formula $u.d\geq\delta\left(s,u\right)$
\end_inset

 so 
\begin_inset Formula 
\[
v.d\geq\delta\left(s,u\right)+w\left(\left(u,v\right)\right)\geq\delta\left(s,v\right)
\]

\end_inset

by the triangle inequality.
 
\end_layout

\begin_layout Proof
Note that once 
\begin_inset Formula $v.d=\delta\left(s,v\right)$
\end_inset

 it cannot decrease further by the above inequality and it cannot increase
 because relaxation only decreases 
\begin_inset Formula $v.d$
\end_inset

.
 
\end_layout

\begin_layout Corollary

\shape up
If there is not path from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

 then 
\begin_inset Formula $\delta\left(s,v\right)=v.d=\infty$
\end_inset

 always.
\end_layout

\begin_layout Lemma

\shape up
\begin_inset CommandInset label
LatexCommand label
name "lem:Immediately-after-relaxing"

\end_inset

Immediately after relaxing edge 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 by executing Relax
\begin_inset Formula $\left(u,v,w\right)$
\end_inset

, 
\begin_inset Formula $v.d\leq u.d+w\left(\left(u,v\right)\right)$
\end_inset

.
 Basically after at least one relaxation 
\begin_inset Formula $v.d$
\end_inset

 will never be larger than the distance to 
\begin_inset Formula $u$
\end_inset

 plus the distance from 
\bar under

\begin_inset Formula $u$
\end_inset


\bar default
 to 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Proof
If 
\shape up

\begin_inset Formula $v.d>u.d+w\left(\left(u,v\right)\right)$
\end_inset

 before relaxation then 
\begin_inset Formula $v.d=u.d+w\left(\left(u,v\right)\right)$
\end_inset

 after relaxation.
 Otherwise if 
\begin_inset Formula $v.d\leq u.d+w\left(\left(u,v\right)\right)$
\end_inset

 before relaxation then Relax
\begin_inset Formula $\left(u,v,w\right)$
\end_inset

 is nilpotent and so 
\begin_inset Formula $v.d\leq u.d+w\left(\left(u,v\right)\right)$
\end_inset

 remains.
\end_layout

\begin_layout Theorem*

\series bold
Convergence property
\series default
.
 
\shape up
Let 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 be a weighted, directed graph with weight function 
\begin_inset Formula $w\,:\, E\rightarrow\mathbb{R}$
\end_inset

 and source vertex 
\begin_inset Formula $s$
\end_inset

, and 
\begin_inset Formula $s\rightsquigarrow u\rightarrow v$
\end_inset

 be a shortest path for some vertices 
\begin_inset Formula $u,v\in V$
\end_inset

.
 Suppose 
\begin_inset Formula $G$
\end_inset

 is initialized using Initialize-Single-Source
\begin_inset Formula $\left(G,s\right)$
\end_inset

 and then a sequence of relaxation steps is performed.
 If 
\begin_inset Formula $u.d=\delta\left(s,u\right)$
\end_inset

 at any time prior calling Relax
\begin_inset Formula $\left(u,v,w\right)$
\end_inset

 then 
\begin_inset Formula $v.d=\delta\left(s,v\right)$
\end_inset

 at all times afterwards.
\end_layout

\begin_layout Proof
By the upper-bound property if 
\begin_inset Formula $u.d=\delta\left(s,u\right)$
\end_inset

 prior to relaxing 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 then it continues to hold thereafter.
 Hence after relaxing 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 we have 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $v.d\leq u.d+w\left(\left(u,v\right)\right)$
\end_inset

 by Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:Immediately-after-relaxing"

\end_inset

 and
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 
\begin_inset Formula 
\begin{eqnarray*}
v.d & \leq & u.d+w\left(\left(u,v\right)\right)\\
 & = & \delta\left(s,u\right)+w\left(\left(u,v\right)\right)\\
 & = & \delta\left(s,v\right)
\end{eqnarray*}

\end_inset

by subpaths of shortest paths are shortest paths
\begin_inset Foot
status open

\begin_layout Plain Layout
Recall that by assumption
\shape up
 
\begin_inset Formula $s\rightsquigarrow u\rightarrow v$
\end_inset

 is a shortest path from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\end_inset

.
 Again by Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:Immediately-after-relaxing"

\end_inset

 
\begin_inset Formula $v.d\geq\delta\left(s,v\right)$
\end_inset

 and so 
\begin_inset Formula $v.d=\delta\left(s,v\right)$
\end_inset

, and the inequality persists thereafter.
 
\end_layout

\begin_layout Theorem*

\series bold
Path-relaxation property
\series default
.
 
\shape up
Let 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 be a weighted, directed graph with weight function 
\begin_inset Formula $w\,:\, E\rightarrow\mathbb{R}$
\end_inset

 and source vertex 
\begin_inset Formula $s$
\end_inset

.
 Consider any shortest path 
\begin_inset Formula $p=\left\langle v_{0}=s,\dots,v_{k}=v\right\rangle $
\end_inset

.
 Suppose 
\begin_inset Formula $G$
\end_inset

 is initialized using Initialize-Single-Source
\begin_inset Formula $\left(G,s\right)$
\end_inset

 and then a sequence of relaxation steps is performed that includes relaxing
 
\begin_inset Formula $\left(v_{0},v_{1}\right),\dots,\left(v_{1},v_{2}\right),\dots,\left(v_{k-1},v_{k}\right)$
\end_inset

 (i.e.
 the edges 
\begin_inset Formula $\left(v_{i},v_{j}\right)$
\end_inset

 are relaxed in order).
 Then 
\begin_inset Formula $v.d=\delta\left(s,v\right)$
\end_inset

 after the relaxations and persists.
\end_layout

\begin_layout Proof
The proof is by induction on the 
\begin_inset Formula $i$
\end_inset

th edge in 
\begin_inset Formula $p$
\end_inset

 to be relaxed.
 For the base case 
\begin_inset Formula $v_{0}.d=s.d=0=\delta\left(s,s\right)$
\end_inset

.
 By the upper-bound property 
\begin_inset Formula $s.d$
\end_inset

 never changes.
\end_layout

\begin_layout Proof
For the inductive step, assume that 
\begin_inset Formula $v_{i-1}.d=\delta\left(s,v_{i-1}\right)$
\end_inset

.
 By the convergence property, after relaxing 
\begin_inset Formula $\left(v_{i-1},v_{i}\right)$
\end_inset

 it's the case that 
\begin_inset Formula $v_{i}.d=\delta\left(s,v_{i}\right)$
\end_inset

.
\end_layout

\begin_layout Theorem

\series bold
Shortest-paths trees
\series default
.
 
\shape up
Let 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 be a weighted, directed graph with weight function 
\begin_inset Formula $w\,:\, E\rightarrow\mathbb{R}$
\end_inset

 and source vertex 
\begin_inset Formula $s$
\end_inset

 and assume 
\begin_inset Formula $G$
\end_inset

 contains no negative-weight cycles reachable from 
\begin_inset Formula $s$
\end_inset

.
 Then after initialization the predecessor subgraph 
\begin_inset Formula $G_{\pi}$
\end_inset

 forms a rooted tree with root 
\begin_inset Formula $s$
\end_inset

, and any sequence of relaxation steps on edges of 
\begin_inset Formula $G$
\end_inset

 maintain this property as an invariant.
\end_layout

\begin_layout Standard
Summary:
\end_layout

\begin_layout Itemize
Triange inequality: 
\begin_inset Formula $\delta\left(s,v\right)\leq\delta\left(s,u\right)+w\left(\left(u,v\right)\right)$
\end_inset


\end_layout

\begin_layout Itemize
Upper-bound property: 
\begin_inset Formula $v.d\geq\delta\left(s,v\right)$
\end_inset


\end_layout

\begin_layout Itemize
Convergence property: 
\begin_inset Formula $s\rightsquigarrow u\rightarrow v$
\end_inset

 a shortest path and 
\begin_inset Formula $u.d=\delta\left(s,u\right)$
\end_inset

 prior to relaxing 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 then 
\begin_inset Formula $v.d=\delta\left(s,v\right)$
\end_inset

 afterward
\end_layout

\begin_layout Itemize
Path-relaxation property: 
\begin_inset Formula $p=\left\langle s=v_{0},\dots,v_{k}=v\right\rangle $
\end_inset

 a shortest path and edges are relaxing in order then 
\begin_inset Formula $v.d=\delta\left(s,v\right)$
\end_inset

.
\end_layout

\begin_layout Itemize
Predecessor-subgraph property: once 
\begin_inset Formula $v.d=\delta\left(s,v\right)$
\end_inset

 for all 
\begin_inset Formula $v\in V$
\end_inset

, the predecessor subgraph is a shortest-paths tree rooted at 
\begin_inset Formula $s$
\end_inset

.
\end_layout

\begin_layout Exercise
\begin_inset ERT
status open

\begin_layout Plain Layout

[24.4-9]
\end_layout

\end_inset

 This is a dumb problem but for completeness I'm writing it up
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Answer stolen from https://dspace.mit.edu/bitstream/handle/1721.1/37150/6-046JFall-
2004/NR/rdonlyres/Electrical-Engineering-and-Computer-Science/6-046JFall-2004/EC
0B786D-A562-4952-B52A-7A4DCEB60908/0/ps6sol.pdf
\end_layout

\end_inset

 .
 First of all 
\begin_inset Formula $\max\left\{ x_{i}\right\} =0$
\end_inset

.
 Why? Let 
\begin_inset Formula $p=\left\langle s,v_{1},\dots,v_{k}\right\rangle $
\end_inset

 be the shortest path from the source to any vertex 
\begin_inset Formula $v_{k}$
\end_inset

 returned by Bellman-Ford.
 By optimal substructure 
\begin_inset Formula $p'=\left\langle s,v_{1}\right\rangle $
\end_inset

 is the shortest path from the source to 
\begin_inset Formula $v_{1}$
\end_inset

.
 But by construction that edge has weight 0 and therefore 
\begin_inset Formula $x_{1}=0$
\end_inset

.
 Finally since the 
\begin_inset Formula $x_{i}\leq0$
\end_inset

 it's the case that 
\begin_inset Formula $\max\left\{ x_{i}\right\} =0$
\end_inset

.
 Now all that remains is to show that Bellman-Ford maximizes 
\begin_inset Formula $\min\left\{ x_{i}\right\} $
\end_inset

.
 
\end_layout

\begin_layout Exercise
Let 
\begin_inset Formula $x_{k}=\min\left\{ x_{i}\right\} $
\end_inset

 and consider 
\begin_inset Formula $p=\left\langle s,v_{1},\dots,v_{k}\right\rangle $
\end_inset

.
 The weight of the path is just the sum of the constraints along the path
\begin_inset Formula 
\begin{eqnarray*}
x_{1}-x_{0} & \leq & 0\\
x_{2}-x_{1} & \leq & C_{1,2}\\
 & \vdots\\
x_{k}-x_{k-1} & \leq & C_{k-1,k}
\end{eqnarray*}

\end_inset

Summing we get 
\begin_inset Formula $x_{k}\leq\sum_{i=1}^{k-1}C_{i,i+1}=w\left(p\right)$
\end_inset

 the distance from source to 
\begin_inset Formula $x_{k}$
\end_inset

.
 Therefore any solution 
\begin_inset Formula $x_{k}$
\end_inset

 that satisfies the constraints cannot be greater than 
\begin_inset Formula $w\left(p\right)$
\end_inset

, the shortest distance from source to 
\begin_inset Formula $v_{k}$
\end_inset

.
 Since Bellman-Ford sets 
\begin_inset Formula $x_{k}=w\left(p\right)$
\end_inset

 it does indeed maximize 
\begin_inset Formula $x_{k}$
\end_inset

.
 I'm guessing that this same reasoning can be applied to argue that Bellman-Ford
 maximizes 
\begin_inset Formula $\sum x_{k}$
\end_inset

.
\end_layout

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[24-1]
\end_layout

\end_inset

Yen's improvement to Bellman-Ford
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[(a)]
\end_layout

\end_inset

Towards a contradiction assume that 
\begin_inset Formula $G_{f}$
\end_inset

 has a cycle.
 Then there exists a sequence of edges 
\begin_inset Formula 
\[
\left\{ \left(v_{a},v_{b}\right),\left(v_{c},v_{d}\right),\dots,\left(v_{j},v_{a}\right)\right\} \subset E_{f}
\]

\end_inset

but by definition 
\begin_inset Formula $\left(v_{j},v_{a}\right)\in E_{b}$
\end_inset

 not in 
\begin_inset Formula $E_{f}$
\end_inset

.
 Similarly for 
\begin_inset Formula $G_{b}$
\end_inset

.
 Topological sort follows from definition too: only edges that 
\begin_inset Quotes eld
\end_inset

flow
\begin_inset Quotes erd
\end_inset

 in the corresponding direction exist in each of 
\begin_inset Formula $E_{f},E_{b}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[(a)]
\end_layout

\end_inset

Stolen from
\begin_inset Foot
status open

\begin_layout Plain Layout
http://11011110.livejournal.com/215330.html
\end_layout

\end_inset

.
 In the first part of any iteration, any path in the shortest path tree
 that starts at a finished vertex and consists of edges only in 
\begin_inset Formula $E_{f}$
\end_inset

 becomes correctly labeled (shortest path in DAG is easy - just relax in
 order of topological sort), i.e.
 all vertices become finished.
 In the second part of any iteration, any path in the shortest path tree
 that starts at a finished vertex and consists of edges only in 
\begin_inset Formula $E_{b}$
\end_inset

 becomes correctly labeled.
 The number of iterations needed then is the maximum alternations between
 
\begin_inset Formula $G_{f}$
\end_inset

 and
\series bold
 
\begin_inset Formula $G_{b}$
\end_inset


\series default
, which is 
\begin_inset Formula $\left(\left|V\right|+1\right)/2$
\end_inset

, since 
\begin_inset Formula $G_{f}$
\end_inset

 and 
\begin_inset Formula $G_{b}$
\end_inset

 partition 
\begin_inset Formula $G$
\end_inset

 in half.
 Another optimization is you don't need to relax edges coming out of a vertex
 that wasn't updated in the previous iteration.
 A final optimization is randomizing the linear ordering to prevent shortest
 paths that alternate between 
\begin_inset Formula $E_{f}$
\end_inset

 and 
\begin_inset Formula $E_{b}$
\end_inset

, bringing down the number of iterations to 
\begin_inset Formula $\left|V\right|/3$
\end_inset

 on average.
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[24-2]
\end_layout

\end_inset

Nesting boxes
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[(a)]
\end_layout

\end_inset

 Well duh.
 If box A can contain box B and box B can contain box C then obviously A
 can contain C.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[(b)]
\end_layout

\end_inset

 Sort both sets of dimensions and if one set is entry-wise prior then it
 fits.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[(c)]
\end_layout

\end_inset

 Do the 
\begin_inset Formula $n^{2}$
\end_inset

 comparisons to figure out all 
\begin_inset Formula $\left(B_{i},B_{j}\right)$
\end_inset

, where 
\begin_inset Formula $B_{i}$
\end_inset

 can contain 
\begin_inset Formula $B_{j}$
\end_inset

.
 Then do a topological sort on the graph because it's a DAG (because what
 would it mean for a cycle of box containments).
 Then find the longest path using DP:
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Python,mathescape=true,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

Longest-Path(G)
\end_layout

\begin_layout Plain Layout

T = Top-Sort(G)
\end_layout

\begin_layout Plain Layout

for $v
\backslash
in T$
\end_layout

\begin_layout Plain Layout

	$v.d = 
\backslash
max_{
\backslash
left(u,v
\backslash
right)
\backslash
in E}
\backslash
left
\backslash
{ u.d+1
\backslash
right
\backslash
} $
\end_layout

\begin_layout Plain Layout

return $
\backslash
max_{v
\backslash
in V}
\backslash
left
\backslash
{ v.d
\backslash
right
\backslash
} $
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Longest Path
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[24-3]
\end_layout

\end_inset

Arbitrage
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[(a)]
\end_layout

\end_inset

Take log.
 Then Bellman-Ford will find negative cycles.
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Problem
\begin_inset ERT
status open

\begin_layout Plain Layout

[24-6]
\end_layout

\end_inset

Bitonic shortest paths.
 Sort the edges by weight.
 Then relax increasing order, decreasing order, then increasing again and
 you're done
\end_layout

\end_body
\end_document
